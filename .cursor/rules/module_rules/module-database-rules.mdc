---
description: LoRAIro データベース層 設計指針（SQLAlchemyパターン）@src/lorairo/database
globs: src/lorairo/database/**/*
alwaysApply: false
---
version: "2.0.0"
# LoRAIro データベース層 設計指針（SQLAlchemyパターン）

## ドキュメント参照
- 仕様 [database_management.md](mdc:docs/specs/core/database_management.md)
- 計画 [database_schema_plan.md](mdc:docs/Plan/core/database_schema_plan.md)
- 現在のアーキテクチャ [architecture.md](mdc:docs/architecture.md)
- 技術仕様 [technical.md](mdc:docs/technical.md)

## 1. 設計思想・全体方針
- 疎結合・単一責任・テスト容易性を最優先。
- SQLAlchemy ORMを標準とし、直接SQL文の埋め込みは原則禁止（外部DB参照等の例外は明記）。
- 依存性注入（DI）やモック化を前提とした設計。

## 2. レイヤー構成と責務
- **ドメイン層** [schema.py](mdc:src/lorairo/database/schema.py) : データ構造・リレーションのみ定義。ビジネスロジックは持たない。
- **Repository層** [db_repository.py](mdc:src/lorairo/database/db_repository.py) : DBアクセス・永続化・検索ロジックのみ担当。セッション管理はwith構文で。
- **Manager層** [db_manager.py](mdc:src/lorairo/database/db_manager.py) : ユースケース単位の集約ロジック。Repositoryのメソッドを組み合わせて提供。
- **Core層** [db_core.py](mdc:src/lorairo/database/db_core.py) : データベース初期化・基盤ユーティリティ。外部DB（genai-tag-db-tools）のパス解決も担当。
- **外部DB連携**: genai-tag-db-toolsのtag_dbをATTACHで参照。書き込みは専用サービス経由で行う。

## 3. コーディング規約・パターン
- セッション管理は必ず`with self.session_factory() as session:`で行う。
- 例外処理はcatchしてロギング後、必要に応じて再送出。呼び出し元での冗長なcatchは避ける。
- DTO/TypedDictでデータ受け渡しを明確化し、dictのまま渡すのは避ける。
- 外部DB参照はRepository内部でラップし、呼び出し元は意識しない。

## 4. 拡張・変更時のルール
- 新しいアノテーション種別追加時は、schema/Repository/Manager/テストをセットで追加。
- DBスキーマ変更は必ずAlembicマイグレーションで管理し、手動でのALTERは禁止。
- 依存性注入を徹底し、テスト時はモック/スタブを利用可能にする。

## 5. テスト・品質保証
- Repository層はユニットテスト必須。DB操作はテスト用DBで検証。
- 主要ユースケース（画像登録、アノテーション保存、検索等）は結合テストを用意。
- テストカバレッジはプロジェクト方針で数値目標を決定。

## 6. 参考資料・アンチパターン
- genai-tag-db-toolsの設計を参考にするが、密結合・コピペ実装は避ける。
- Fat Manager/Repository（肥大化したクラス）はNG。責務が増えたら分割を検討。

---

## 7. アップスケーラー情報記録仕様 (2025/07/10追加)

### 設計概要
画像処理時に使用されたアップスケーラー情報をProcessedImageテーブルに記録する機能。学習用タグとシステム処理情報を分離するアプローチを採用。

### データベース設計
- **テーブル**: ProcessedImage
- **新規カラム**: `upscaler_used: Mapped[str | None] = mapped_column(String)`
- **データ形式**: 生のアップスケーラーキー名（例: "RealESRGAN_x4plus"）
- **既存レコード**: 移行後はNULL値を維持（後方互換性）

### 実装アプローチ
1. **スキーマ拡張**: ProcessedImageテーブルとProcessedImageDictに`upscaler_used`フィールド追加
2. **メタデータ追跡**: ImageProcessingManagerの戻り値をタプル形式に変更（Image, metadata dict）
3. **情報記録**: 
   - `was_upscaled=True`の場合のみ`upscaler_used`をメタデータに追加
   - アップスケール実行時は自動的に"upscaled"タグも追加
4. **設定統合**: ImageDatabaseManagerに依存性注入でConfigurationServiceを追加

### データフロー
```
設定ファイル → ConfigurationService → ImageDatabaseManager → 
ImageProcessingManager → 処理メタデータ → ProcessedImageテーブル
```

### 技術決定の根拠
- **単一カラム**: boolean + name カラムではなく、upscaler名のみ（NULLは未実行を意味）
- **生キー名保存**: MODEL_PATHSのキー名をそのまま記録（変換処理なし）
- **TAG分離**: 学習用のTAGテーブルと処理情報のProcessedImageテーブルを分離
- **後方互換性**: 既存レコードはNULLのまま保持

---

## 典型的な設計パターン例

### セッション管理（Repository内）

```python
class ImageRepository:
    def __init__(self, session_factory):
        self.session_factory = session_factory

    def add_original_image(self, info: dict) -> int:
        with self.session_factory() as session:
            # DB操作
            session.add(...)
            session.commit()
```

### DTO/TypedDictによるデータ受け渡し

```python
class TagAnnotationData(TypedDict):
    tag: str
    model_id: int | None
    confidence_score: float | None
    existing: bool
    is_edited_manually: bool | None
    tag_id: int | None
```

### 外部DB参照のラップ

```python
def _get_or_create_tag_id_external(self, session, tag_string: str) -> int | None:
    stmt = text("SELECT tag_id FROM tag_db.TAGS WHERE tag = :tag_name")
    return session.execute(stmt, {"tag_name": tag_string}).scalar_one_or_none()
```

---

## Mermaid図（レイヤー構成イメージ）

```mermaid
flowchart TD
    GUI[GUI層]
    Service[アプリケーション/サービス層<br>（ImageDatabaseManager等）]
    Repo[Repository層<br>（ImageRepository等）]
    Schema[ドメイン層<br>（SQLAlchemyモデル）]
    DB[(DB/外部DB)]

    GUI --> Service
    Service --> Repo
    Repo --> Schema
    Schema --> DB
    Repo -.->|ATTACH/参照| DB
```

---

## アンチパターン例

- Fat Manager/Repository（肥大化したクラス）
- 直接SQL文を多用する（ORMの利点を損なう）
- セッションをグローバルに使い回す
- 例外を握りつぶしてロギングしない
- テスト不能な密結合設計

---

## 運用・拡張時の注意

- AlembicマイグレーションでDBスキーマを一元管理
- 新機能追加時は必ずテスト・ドキュメントもセットで
- 既存コードの責務が増えたら分割・リファクタリングを検討

---

## アップスケーラー情報記録機能設計決定 (2025-07-10)

### 概要
ProcessedImageテーブルにアップスケーラー情報を記録し、どの画像がどのアップスケーラーで処理されたかを追跡可能にする機能の設計仕様。

### 設計方針
- 学習用TAGテーブルとシステム処理情報の分離
- 既存コードへの影響を最小限に抑制
- わかりやすくシンプルな実装

### スキーマ変更
```sql
-- ProcessedImageテーブルに追加するカラム（1つのみ）
upscaler_used: Mapped[str | None] = mapped_column(String)
```

### データ仕様
- **アップスケール実行時**: `"RealESRGAN_x4plus"` (MODEL_PATHSのキー名)
- **アップスケール未実行**: `NULL`
- **既存レコード**: マイグレーション後も `NULL` を維持
- **判定ロジック**: `upscaler_used IS NOT NULL` でアップスケール済み判定

### TypedDict更新
```python
class ProcessedImageDict(TypedDict):
    # 既存フィールド...
    upscaler_used: NotRequired[str | None]  # オプショナルフィールド
```

### 実装方針
1. **データ登録**: 既存の`info`辞書にメタデータを含める方式
2. **512px統一**: `_generate_thumbnail_512px()`で`ImageProcessingManager`使用
3. **一意性制約**: 現在の制約を維持（最新で上書き）

### 実装場所
```python
# ImageProcessingService._process_single_image() 内
processed_image, processing_metadata = ipm.process_image(...)
if processed_image:
    processed_path = self.fsm.save_processed_image(...)
    processed_metadata = self.fsm.get_image_info(processed_path)
    
    # アップスケール情報を追加
    processed_metadata["upscaler_used"] = processing_metadata.get("upscaler_used")
    
    self.idm.register_processed_image(image_id, processed_path, processed_metadata)
```

### 変更対象ファイル
- `src/lorairo/database/schema.py` - スキーマ拡張
- `src/lorairo/services/image_processing_service.py` - メタデータ渡し
- `src/lorairo/database/db_manager.py` - 512px生成統一
- 新規: Alembicマイグレーションファイル

### 実装順序
1. スキーマ更新とマイグレーション
2. ImageProcessingService更新
3. ImageDatabaseManager更新
4. 表示機能実装（後回し可）

**決定日**: 2025-07-10  
**ステータス**: 確定  
**承認者**: プロジェクト要件に基づく設計決定

```