# LoRAIro Implementation Guidelines

This file provides structured implementation guidelines for LoRAIro development.

## Implementation Workflow

### 1. Pre-Implementation Checklist
Before writing code, ensure:

- [ ] Requirements are clearly understood
- [ ] Implementation plan is approved
- [ ] Development environment is set up (`uv sync --dev`)
- [ ] Tests are planned and understood
- [ ] Architecture patterns are identified

### 2. Incremental Development
Follow incremental development principles:

- **One Feature at a Time**: Focus on single functionality
- **Small Commits**: Frequent, atomic commits with clear messages
- **Test-Driven**: Write tests alongside implementation
- **Continuous Integration**: Regular testing and validation
- **Documentation**: Update docs as you go

### 3. Code Quality Standards
Maintain high code quality throughout:

- **Type Hints**: All functions must have type hints
- **Error Handling**: Comprehensive exception handling
- **Logging**: Appropriate Loguru logging statements
- **Comments**: Explain why, not what
- **Formatting**: Use `ruff format` consistently

### 4. Testing Strategy
Implement comprehensive testing:

- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test component interactions
- **GUI Tests**: Test user interface components
- **Coverage**: Maintain >75% test coverage

### 5. Validation and Review
Validate implementation thoroughly:

- **Self-Review**: Review your own code before sharing
- **Testing**: Run full test suite
- **Linting**: Clean `ruff check` and `mypy` results
- **Manual Testing**: Test actual functionality
- **Documentation**: Update relevant documentation

## LoRAIro Implementation Patterns

### Service Layer Implementation
Follow established service patterns in `src/lorairo/services/`:

```python
from typing import Protocol
from pathlib import Path
from lorairo.services.base_worker import BaseWorker
from lorairo.database.db_manager import DatabaseManager
from lorairo.services.configuration_service import ConfigurationService

class ImageProcessingService:
    def __init__(
        self, 
        config: ConfigurationService, 
        db_manager: DatabaseManager
    ) -> None:
        self.config = config
        self.db_manager = db_manager
        self._logger = get_logger(__name__)
    
    def process_images(self, image_paths: list[Path]) -> list[ProcessingResult]:
        """Process multiple images with proper error handling."""
        results = []
        for path in image_paths:
            try:
                result = self._process_single_image(path)
                results.append(result)
            except Exception as e:
                self._logger.error(f"Failed to process {path}: {e}")
                results.append(ProcessingResult(error=str(e)))
        return results
```

### Database Operations
Use repository pattern for database access in `src/lorairo/database/`:

```python
from lorairo.database.db_repository import ImageRepository
from lorairo.database.schema import ImageRecord

class ImageRepository:
    def create_image_record(self, image_path: Path) -> ImageRecord:
        """Create new image record with proper validation."""
        if not image_path.exists():
            raise FileNotFoundError(f"Image not found: {image_path}")
        
        record = ImageRecord(
            file_path=str(image_path),
            # ... other fields
        )
        return self._save_record(record)
```

### AI Integration Implementation
Use local packages for AI functionality:

```python
# AI Annotation Integration (src/lorairo/annotations/ai_annotator.py)
from image_annotator_lib import annotate, list_available_annotators, PHashAnnotationResults
from PIL import Image

def call_annotate_library(
    images_list: list[Image.Image],
    model_name_list: list[str], 
    phash_list: list[str]
) -> PHashAnnotationResults:
    """Use image-annotator-lib for AI annotation."""
    try:
        results = annotate(
            images_list=images_list,
            model_name_list=model_name_list,
            phash_list=phash_list
        )
        return results
    except Exception as e:
        raise AiAnnotatorError(f"Annotation failed: {e}") from e

# Tag Processing Integration (src/lorairo/annotations/cleanup_txt.py)
from genai_tag_db_tools import initialize_tag_searcher

def clean_tags(tags: list[str]) -> list[str]:
    """Use genai-tag-db-tools for tag cleaning."""
    searcher = initialize_tag_searcher()
    cleaned_tags = []
    for tag in tags:
        # Use searcher for tag normalization
        cleaned_tag = searcher.normalize_tag(tag)
        if cleaned_tag:
            cleaned_tags.append(cleaned_tag)
    return cleaned_tags
            file_size=image_path.stat().st_size,
            created_at=datetime.now()
        )
        
        with self.get_session() as session:
            session.add(record)
            session.commit()
            session.refresh(record)
            
        return record
```

### GUI Component Implementation
Follow PySide6 patterns:

```python
from PySide6.QtWidgets import QWidget
from PySide6.QtCore import Signal, QThread
from lorairo.gui.designer.ImagePreviewWidget_ui import Ui_ImagePreviewWidget
from lorairo.services.image_processing_service import ImageProcessingService

class ImagePreviewWidget(QWidget):
    image_selected = Signal(str)  # Emit image path when selected
    
    def __init__(
        self, 
        image_service: ImageProcessingService,
        parent: QWidget | None = None
    ) -> None:
        super().__init__(parent)
        self.ui = Ui_ImagePreviewWidget()
        self.ui.setupUi(self)
        self.image_service = image_service
        self._setup_connections()
    
    def _setup_connections(self) -> None:
        """Set up signal/slot connections."""
        self.ui.load_button.clicked.connect(self._load_image)
    
    def _load_image(self) -> None:
        """Load and display selected image."""
        # Implementation here
        pass
```

### Configuration Management
Handle configuration properly:

```python
from lorairo.utils.config import load_config, ConfigurationService
from pathlib import Path

class AnnotationService:
    def __init__(self, config_path: Path = Path("config/lorairo.toml")) -> None:
        self.config = load_config(config_path)
        self.ai_providers = self._setup_ai_providers()
    
    def _setup_ai_providers(self) -> dict[str, AIProvider]:
        """Initialize AI providers from configuration."""
        providers = {}
        for name, config in self.config.ai_providers.items():
            if config.get("enabled", True):
                providers[name] = self._create_provider(name, config)
        return providers
```

### Error Handling Patterns
Implement comprehensive error handling:

```python
from lorairo.exceptions.errors import AnnotationError, ConfigurationError
from loguru import logger

class AIAnnotationService:
    def annotate_image(self, image_path: Path) -> AnnotationResult:
        """Annotate image with comprehensive error handling."""
        try:
            # Validate input
            if not image_path.exists():
                raise FileNotFoundError(f"Image not found: {image_path}")
            
            # Process image
            result = self._call_ai_provider(image_path)
            logger.info(f"Successfully annotated {image_path}")
            return result
            
        except FileNotFoundError as e:
            logger.error(f"File error: {e}")
            return AnnotationResult(error=str(e))
        except AnnotationError as e:
            logger.error(f"Annotation failed: {e}")
            return AnnotationResult(error=str(e))
        except Exception as e:
            logger.exception(f"Unexpected error annotating {image_path}")
            return AnnotationResult(error=f"Unexpected error: {e}")
```

### Asynchronous Operations
Handle long-running operations properly:

```python
from PySide6.QtCore import QThread, Signal
from typing import Callable

class AnnotationWorker(QThread):
    progress_updated = Signal(int)  # Progress percentage
    annotation_completed = Signal(str, dict)  # image_path, result
    error_occurred = Signal(str, str)  # image_path, error_message
    
    def __init__(
        self, 
        image_paths: list[Path], 
        annotate_func: Callable[[Path], AnnotationResult]
    ) -> None:
        super().__init__()
        self.image_paths = image_paths
        self.annotate_func = annotate_func
    
    def run(self) -> None:
        """Process images in background thread."""
        total = len(self.image_paths)
        for i, image_path in enumerate(self.image_paths):
            try:
                result = self.annotate_func(image_path)
                if result.error:
                    self.error_occurred.emit(str(image_path), result.error)
                else:
                    self.annotation_completed.emit(str(image_path), result.data)
            except Exception as e:
                self.error_occurred.emit(str(image_path), str(e))
            
            progress = int((i + 1) / total * 100)
            self.progress_updated.emit(progress)
```

## Implementation Checklist

### Before Starting Implementation
- [ ] Understand the requirements completely
- [ ] Review existing codebase patterns
- [ ] Plan the implementation approach
- [ ] Set up proper development environment
- [ ] Identify testing strategy

### During Implementation
- [ ] Follow incremental development
- [ ] Write tests alongside code
- [ ] Use proper type hints
- [ ] Implement comprehensive error handling
- [ ] Add appropriate logging
- [ ] Follow code style guidelines
- [ ] Update documentation as needed

### Code Quality Checks
- [ ] Run `ruff format` for formatting
- [ ] Run `ruff check` and fix issues
- [ ] Run `mypy src/` and resolve type errors
- [ ] Ensure test coverage >75%
- [ ] Verify all tests pass
- [ ] Manual testing of functionality

### Database Changes
- [ ] Create migration if schema changes needed
- [ ] Test migration up and down
- [ ] Verify data integrity
- [ ] Update repository patterns
- [ ] Test database operations

### GUI Changes
- [ ] Update Qt Designer files if needed
- [ ] Regenerate UI Python files
- [ ] Test user interactions
- [ ] Verify responsive design
- [ ] Check accessibility considerations

### Configuration Changes
- [ ] Update TOML configuration files
- [ ] Add proper defaults
- [ ] Update configuration documentation
- [ ] Test configuration loading
- [ ] Verify backward compatibility

### Final Validation
- [ ] All tests pass
- [ ] No linting errors
- [ ] No type checking errors
- [ ] Manual testing complete
- [ ] Documentation updated
- [ ] Ready for review

## Common Implementation Patterns

### Dependency Injection
Use constructor injection for services:

```python
class MainWindow:
    def __init__(
        self,
        image_service: ImageProcessingService,
        annotation_service: AnnotationService,
        config_service: ConfigurationService
    ) -> None:
        self.image_service = image_service
        self.annotation_service = annotation_service
        self.config_service = config_service
```

### Factory Pattern
Use factories for complex object creation:

```python
class ServiceFactory:
    @staticmethod
    def create_annotation_service(config_path: Path) -> AnnotationService:
        config = load_config(config_path)
        db_manager = DatabaseManager(config.database)
        return AnnotationService(config, db_manager)
```

### Observer Pattern
Use Qt signals for component communication:

```python
class ImageProcessor(QObject):
    processing_started = Signal()
    processing_finished = Signal(dict)
    processing_failed = Signal(str)
    
    def process_images(self, paths: list[Path]) -> None:
        self.processing_started.emit()
        try:
            results = self._do_processing(paths)
            self.processing_finished.emit(results)
        except Exception as e:
            self.processing_failed.emit(str(e))
```

## Anti-Patterns to Avoid

### Don't Do These
- **Direct Database Access**: Always use repository pattern
- **Hardcoded Paths**: Use configuration or relative paths
- **Missing Error Handling**: Always handle exceptions
- **No Type Hints**: All functions must have type hints
- **Large Functions**: Break down complex functions
- **Tight Coupling**: Use dependency injection
- **No Testing**: Write tests alongside implementation
- **Missing Logging**: Add appropriate log statements