# LoRAIro Planning Guidelines

This file provides structured planning guidelines for LoRAIro development tasks.

## Planning Workflow

### 1. Requirements Clarification
Before starting any development task, thoroughly clarify requirements:

- **Understand the Problem**: What specific issue are we solving?
- **Define Success Criteria**: How will we know the task is complete?
- **Identify Constraints**: What limitations exist (time, resources, compatibility)?
- **Gather Context**: Review existing codebase and architecture
- **Ask Clarifying Questions**: Don't assume - ask for specifics

### 2. Comprehensive Analysis
Perform thorough analysis of the problem space:

- **Current State Assessment**: What exists now?
- **Gap Analysis**: What's missing or broken?
- **Impact Analysis**: What components will be affected?
- **Risk Assessment**: What could go wrong?
- **Dependency Mapping**: What depends on what?

### 3. Solution Design
Design comprehensive solutions before implementation:

- **Multiple Approaches**: Consider at least 2-3 different approaches
- **Pros and Cons**: Evaluate trade-offs for each approach
- **Architecture Alignment**: Ensure solutions fit existing patterns
- **Scalability Considerations**: Will this work long-term?
- **Testing Strategy**: How will we verify it works?

### 4. Implementation Planning
Create detailed implementation plans:

- **Task Breakdown**: Break large tasks into smaller, manageable pieces
- **Sequencing**: Order tasks logically with dependencies
- **Resource Requirements**: What tools, libraries, or data are needed?
- **Timeline Estimation**: Realistic time estimates for each phase
- **Milestone Definition**: Clear checkpoints for progress tracking

### 5. User Validation
Validate plans before implementation:

- **Present Clear Options**: Show alternative approaches with reasoning
- **Explain Trade-offs**: Be transparent about pros and cons
- **Seek Feedback**: Ask for input on approach and priorities
- **Confirm Understanding**: Ensure alignment on goals and methods
- **Get Approval**: Explicit approval before proceeding

## LoRAIro-Specific Planning Considerations

### Architecture Review
Always consider impact on:
- **Service Layer**: Will this affect existing services?
- **Database Schema**: Are schema changes needed?
- **GUI Components**: How will UI need to change?
- **Configuration**: What new settings are required?
- **AI Integration**: Impact on annotation providers?

### Code Quality Planning
Plan for quality from the start:
- **Type Safety**: Ensure proper type hints
- **Error Handling**: Plan exception handling strategy
- **Logging**: What should be logged?
- **Testing**: Unit, integration, and GUI test needs
- **Documentation**: What docs need updating?

### Performance Considerations
Plan for performance impact:
- **Memory Usage**: Large image processing implications
- **Database Queries**: Efficient query patterns
- **AI API Calls**: Rate limiting and caching
- **File I/O**: Batch processing efficiency
- **UI Responsiveness**: Async operations for long tasks

### Configuration Management
Plan configuration changes:
- **TOML Updates**: What new config sections are needed?
- **Environment Variables**: New API keys or settings?
- **Migration Strategy**: How to handle config changes?
- **Backward Compatibility**: Support for existing configs?
- **Default Values**: Sensible defaults for new settings?

### Testing Strategy
Plan comprehensive testing:
- **Unit Tests**: What components need unit tests?
- **Integration Tests**: What interactions need testing?
- **GUI Tests**: What user workflows need validation?
- **Mock Strategy**: What external dependencies need mocking?
- **Test Data**: What test images or datasets are needed?

### Database Planning
Plan database changes carefully:
- **Schema Evolution**: Is migration needed?
- **Data Integrity**: How to preserve existing data?
- **Performance Impact**: Index considerations?
- **Backup Strategy**: How to handle rollbacks?
- **Testing**: Database test requirements?

### Deployment Considerations
Plan for deployment impact:
- **Local Package Updates**: Do submodules need changes?
- **Dependency Changes**: New Python packages required?
- **Configuration Migration**: User config update needs?
- **Data Migration**: Existing data transformation?
- **Rollback Plan**: How to undo changes if needed?

## Planning Templates

### Feature Addition Template
1. **Feature Description**: Clear, concise description
2. **User Value**: Why is this valuable?
3. **Technical Approach**: How will it be implemented?
4. **Architecture Impact**: What components are affected?
5. **Configuration Changes**: What settings are needed?
6. **Testing Plan**: How will it be tested?
7. **Documentation Updates**: What docs need changes?

### Bug Fix Template
1. **Problem Description**: What's broken?
2. **Root Cause Analysis**: Why is it broken?
3. **Impact Assessment**: What's affected?
4. **Solution Approach**: How will it be fixed?
5. **Regression Prevention**: How to prevent recurrence?
6. **Testing Strategy**: How to verify the fix?

### Refactoring Template
1. **Current State**: What exists now?
2. **Problems**: What issues need addressing?
3. **Target State**: What should it become?
4. **Migration Strategy**: How to get there safely?
5. **Risk Mitigation**: How to minimize disruption?
6. **Validation Plan**: How to ensure nothing breaks?

## Common Planning Pitfalls

### Avoid These Mistakes
- **Insufficient Requirements**: Starting without clear understanding
- **Over-engineering**: Building more than needed
- **Under-planning**: Not considering all implications
- **Ignoring Dependencies**: Missing component interactions
- **Skipping Validation**: Proceeding without user confirmation
- **Poor Testing Strategy**: Inadequate quality assurance planning

### Best Practices
- **Start Simple**: Begin with minimal viable solution
- **Iterate**: Plan for incremental improvement
- **Document Decisions**: Record why choices were made
- **Consider Alternatives**: Always have Plan B
- **Plan for Failure**: What if something goes wrong?
- **Communicate Clearly**: Ensure everyone understands the plan