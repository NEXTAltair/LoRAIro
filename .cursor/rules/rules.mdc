---
description: 
globs: 
alwaysApply: false
---
# LoRAIro Development Rules

This file provides guidance for developing the LoRAIro image annotation application using Claude Code.

## Core Principles
# LoRAIro プロジェクト開発ワークフロー・アーキテクチャルール

## プロジェクト概要

LoRAIroは機械学習データセット準備のためのAI駆動画像アノテーション・管理アプリケーションです。

## 開発ワークフロー

### 1. 要件・明確化
- 実装前に常に要件を明確化する
- 仮定と設計決定を文書化する
- 既存のアーキテクチャパターンを参照する

### 2. 計画・設計
- 既存のコードベース構造をレビューする
- `src/lorairo/`の確立されたパターンに従う
- データベーススキーマとマイグレーションへの影響を考慮する
- 適切なエラーハンドリングとログ記録を計画する

### 3. 実装
- インクリメンタル開発アプローチに従う
- テストと共に一度に1つの機能を実装する
- サービスには依存性注入を使用する
- 命名規則とコードスタイルに従う

### 4. テスト・検証
- 全テストカテゴリを実行: `pytest -m unit`, `pytest -m integration`, `pytest -m gui`
- 適切なテストカバレッジを確保: `pytest --cov=src --cov-report=html`
- リンティング実行: `ruff check` と `ruff format`
- 型チェック実行: `mypy src/`

### 5. ドキュメント更新
- 関連ドキュメントファイルを更新する
- 開発コマンドが変更された場合はCLAUDE.mdを更新する
- アーキテクチャ決定を文書化する

## アーキテクチャパターン

### サービス層パターン
```python
# サービスはビジネスロジックを処理
class ImageProcessingService:
    def __init__(self, config: ConfigurationService, db: DatabaseManager):
        self.config = config
        self.db = db
```

### リポジトリパターン
```python
# リポジトリ層を通じたデータベースアクセス
class DatabaseRepository:
    def get_images_by_status(self, status: ImageStatus) -> list[ImageRecord]:
        pass
```

### 設定管理
```python
# TOML設定を使用
from lorairo.utils.config import load_config
config = load_config("config/lorairo.toml")
```

## 重要なファイル位置

- **メイン設定**: `config/lorairo.toml`
- **データベーススキーマ**: `src/lorairo/database/schema.py`
- **メインアプリケーション**: `src/lorairo/main.py`
- **GUIコンポーネント**: `src/lorairo/gui/`
  - **メインウィンドウ**: `src/lorairo/gui/window/main_workspace_window.py`
  - **ワーカー**: `src/lorairo/gui/workers/` (PySide6 QRunnable)
  - **サービス**: `src/lorairo/gui/services/worker_service.py` (Qt調整)
  - **状態管理**: `src/lorairo/gui/state/dataset_state.py`
- **サービス**: `src/lorairo/services/`
- **ローカルパッケージ**: `local_packages/` (uv.sourcesで管理)

## ローカルパッケージ統合

プロジェクトはサブモジュールとして2つのローカルパッケージを使用:
- `local_packages/genai-tag-db-tools` - タグデータベースユーティリティ
- `local_packages/image-annotator-lib` - コアアノテーション機能

これらは`uv sync`中に自動的にリンクされ、外部依存関係として扱われる。

## データベース操作

- マイグレーションにはAlembicを使用: `alembic revision --autogenerate -m "description"`
- マイグレーション適用: `alembic upgrade head`
- `src/lorairo/database/schema.py`の確立されたスキーマに従う

## テストガイドライン (Updated: 2025-07-20)

- **単体テスト**: モッキングを使用した高速で独立したテスト (`pytest -m unit`)
- **統合テスト**: サービス間の相互作用とデータベース操作をテスト (`pytest -m integration`)
- **GUIテスト**: PySide6コンポーネントとユーザーインタラクションをテスト (`pytest -m gui`)
- **ワーカーテスト**: QRunnable-based非同期ワーカーのテスト (`tests/unit/gui/workers/`)
- テストリソースは`tests/resources/`に配置
- 共通セットアップにはpytestフィクスチャを使用
- **現在のステータス**: 352テスト通過、41失敗、25エラー (84%成功率)
- **知られている問題**: 
  - ワーカーシステム調整 (threading/async)
  - データベース統合 (schema/migration)
  - GUI初期化エラー
  - 日本語テキスト処理 (BDD)

## エラーハンドリング

- 適切な場所でカスタム例外を使用
- Loguruを使用して適切なコンテキストでエラーをログ記録
- GUIでユーザーフレンドリーなエラーメッセージを提供
- AIプロバイダーエラーを適切に処理

## AI統合

- 複数のAIプロバイダーをサポート (GPT-4, Claude, Gemini)
- APIキーとモデル選択に設定を使用
- 適切なリトライロジックとレート制限を実装
- APIエラーとタイムアウトを適切に処理

## メモリ管理

- 大きな画像処理のメモリ使用量を監視
- 一時ファイルの適切なクリーンアップを実装
- 適切な画像形式とサイズを使用
- 大きなデータセットのバッチ処理を検討

## 品質基準

1. **コード品質**: 適切な型ヒント、ドキュメント、テストで高いコード品質を維持
2. **アーキテクチャ一貫性**: 確立されたサービス層パターンと依存性注入に従う
3. **設定駆動**: 設定にはTOML設定ファイルを使用
4. **エラーハンドリング**: 包括的なエラーハンドリングとログ記録を実装
5. **テスト**: 適切な単体、統合、GUIテストで75%以上のテストカバレッジを維持